# -*- coding: utf-8 -*-
"""fight_pricce.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1agf_ctMn5oLfAISrKWxSTmERSzRMgsBw
"""

from google.colab import drive
drive.mount("/content/drive")

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
sns.set()
import datetime as dt

df = pd.read_excel("/content/drive/MyDrive/Datasets/flight_price datasets/Data_Train.xlsx")
df

df.info()

df['Duration'].value_counts()

df.dropna(inplace=True)

df.isnull().sum()

df["joureny of Day"] = pd.to_datetime(df['Date_of_Journey'], format="%d/%m/%Y").dt.day
df["joureny of month"] = pd.to_datetime(df['Date_of_Journey'], format="%d/%m/%Y").dt.month
df.drop(['Date_of_Journey','Additional_Info'], axis=1, inplace=True)

df["dep_hour"]=pd.to_datetime(df['Dep_Time']).dt.hour
df["dep_min"]=pd.to_datetime(df['Dep_Time']).dt.minute
df.drop('Dep_Time', axis=1, inplace=True)
df

df.Total_Stops.value_counts()

df["Arrival_hour"] = pd.to_datetime(df.Arrival_Time).dt.hour
df["Arrival_min"] =pd.to_datetime(df.Arrival_Time).dt.minute
df

df

duration = list(df.Duration)
for i in range(len(duration)):
  if(len(duration[i].split()) != 2):
    if 'h' in duration[i]:
      duration[i] = duration[i].strip()+ ' 0m'
    else:
      duration[i] = '0h ' + duration[i]
duration_hours=[]
duration_min =[]
for i in range(len(duration)):
  duration_hours.append(int(duration[i].split(sep="h")[0]))
  duration_min.append(int(duration[i].split(sep="m")[0].split()[-1]))

df['Duration_hours'] = duration_hours
df['Duration_min']= duration_min
df

df.drop('Duration', axis=1, inplace=True)

df

df.drop('Arrival_Time' ,axis=1, inplace=True)

sns.catplot(x='Airline', y='Price', data=df.sort_values("Price", ascending=False), kind="boxen", height=6, aspect=3)
plt.show()

airline = df[['Airline']]
airline = pd.get_dummies(airline, drop_first=True)
airline.head(10)

df

sns.catplot(x="Source" ,y="Price", data=df.sort_values("Price",ascending=False), kind="boxen", height=6 , aspect =3)

source = df[["Source"]]
source = pd.get_dummies(source, drop_first=True)
source

sns.catplot(x="Destination", y="Price" , data=df.sort_values("Price", ascending=False),kind="boxen", height=6, aspect=3)
plt.show()

desntation = df[["Destination"]]
desntation= pd.get_dummies(desntation, drop_first=True)
desntation

df.drop("Route", axis=1, inplace=True)
df

df.Total_Stops.value_counts()

df.replace({"non-stop":0, "1 stop":1, "2 stops":2, "3 stops":3, "4 stops":4},inplace=True )
df

data_train = pd.concat([df, desntation, airline,source] ,axis=1)
data_train.head(5)

data_train.drop(['Airline', 'Source','Destination' ], axis=1, inplace= True)
data_train

data_train

#test data
df= pd.read_excel("/content/drive/MyDrive/Datasets/flight_price datasets/Test_set.xlsx")
df

df.drop(["Route", "Additional_Info"], axis=1, inplace=True)

df.head()

#airline
airline = df[['Airline']]
airline = pd.get_dummies(airline, drop_first=True)
airline.head(10)
#Date of jouney
df["joureny of Day"] = pd.to_datetime(df['Date_of_Journey'], format="%d/%m/%Y").dt.day
df["joureny of month"] = pd.to_datetime(df['Date_of_Journey'], format="%d/%m/%Y").dt.month
df.drop(['Date_of_Journey'], axis=1, inplace=True)
#source
source = df[["Source"]]
source = pd.get_dummies(source, drop_first=True)
source.head(10)
#Destination 
desntation = df[["Destination"]]
desntation= pd.get_dummies(desntation, drop_first=True)
desntation.head(10)
#Dep_Time
df["dep_hour"]=pd.to_datetime(df['Dep_Time']).dt.hour
df["dep_min"]=pd.to_datetime(df['Dep_Time']).dt.minute
df.drop('Dep_Time', axis=1, inplace=True)
#Arrival Time
df["Arrival_hour"] = pd.to_datetime(df.Arrival_Time).dt.hour
df["Arrival_min"] =pd.to_datetime(df.Arrival_Time).dt.minute
df.drop("Arrival_Time", axis=1, inplace=True)
#Duration
duration = list(df.Duration)
for i in range(len(duration)):
  if(len(duration[i].split()) != 2):
    if 'h' in duration[i]:
      duration[i] = duration[i].strip()+ ' 0m'
    else:
      duration[i] = '0h ' + duration[i]
duration_hours=[]
duration_min =[]
for i in range(len(duration)):
  duration_hours.append(int(duration[i].split(sep="h")[0]))
  duration_min.append(int(duration[i].split(sep="m")[0].split()[-1])) 
df['Duration_hours'] = duration_hours
df['Duration_min']= duration_min
df.drop('Duration', axis=1, inplace=True)
#Totals
df.replace({"non-stop":0, "1 stop":1, "2 stops":2, "3 stops":3, "4 stops":4},inplace=True)
df

airline

source

desntation

data_test= pd.concat([df,airline, source, desntation], axis=1)

data_test

data_test.drop(['Airline', 'Source','Destination' ], axis=1, inplace= True)

data_test

data_train.columns

data_test.columns

x=data_train.loc[:,['Total_Stops', 'joureny of Day', 'joureny of month',
       'dep_hour', 'dep_min', 'Arrival_hour', 'Arrival_min', 'Duration_hours',
       'Duration_min', 'Destination_Cochin', 'Destination_Delhi',
       'Destination_Hyderabad', 'Destination_Kolkata', 'Destination_New Delhi',
       'Airline_Air India', 'Airline_GoAir', 'Airline_IndiGo',
       'Airline_Jet Airways', 'Airline_Jet Airways Business',
       'Airline_Multiple carriers',
       'Airline_Multiple carriers Premium economy', 'Airline_SpiceJet',
       'Airline_Trujet', 'Airline_Vistara', 'Airline_Vistara Premium economy',
       'Source_Chennai', 'Source_Delhi', 'Source_Kolkata', 'Source_Mumbai']]
x.shape

y =data_train.iloc[:,1]
y.shape

plt.figure(figsize = (18,18))
sns.heatmap(data_train.corr(), annot = True, cmap = "RdYlGn")

plt.show()

from sklearn.ensemble import ExtraTreesRegressor
selection = ExtraTreesRegressor()
selection.fit(x,y)

print(selection.feature_importances_)

plt.figure(figsize=(12,8))
feature_imp = pd.Series(selection.feature_importances_ , index=x.columns)
feature_imp.nlargest(20).plot(kind="barh")
plt.show()

"""# New Section

Random foreset
"""

from sklearn.model_selection import train_test_split
xtrain, xtest, ytrain, ytest = train_test_split(x,y, test_size=0.2, random_state=42)


from sklearn.ensemble import RandomForestRegressor
model= RandomForestRegressor()
model.fit(xtrain,ytrain)

y_predict = model.predict(xtest)
model.score(xtrain, ytrain)

model.score(xtest, ytest)

ypred= model.predict(xtest)

def calculate_mape(actual, predicted) -> float:
  
    # Convert actual and predicted
    # to numpy array data type if not already
    if not all([isinstance(actual, np.ndarray),
                isinstance(predicted, np.ndarray)]):
        actual, predicted = np.array(actual), np.array(predicted)
  
    # Calculate the MAPE value and return
    return round(np.mean(np.abs((
      actual - predicted) / actual)) * 100, 2)
print(calculate_mape(ytest,y_predict),"%")

data_test.columns

data_train.columns

from sklearn.metrics import r2_score
r2_score(ytest, ypred)

import pickle
# open a file, where you ant to store the data
file = open('flight_rf.pkl', 'wb')

# dump information to that file
pickle.dump(model, file)
model = open('flight_rf.pkl','rb')
forest = pickle.load(model)
y_prediction = forest.predict([[1,20,1,2,20,2,20,2,0,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0,1,1,0]])
print(y_prediction)

"""# **Deep LERaning**"""

import tensorflow as tf
import tensorflow.keras
import keras

print(xtrain.shape, xtest.shape, ytrain.shape, ytest.shape)

deep_model = keras.Sequential([
                               tf.keras.layers.Dense(128,activation='relu', input_shape=(29,)),
                               tf.keras.layers.Dense(256, activation="relu"),
                               tf.keras.layers.Dense(256,activation="relu"),
                               tf.keras.layers.Dense(128, activation="relu"),
                               tf.keras.layers.Dense(29, activation='relu'),
                               tf.keras.layers.Dense(1 )
])

deep_model.compile(
    optimizer="rmsprop",
    loss="mse",
    metrics =["mae","mse"]
)

deep_model.summary()

deep_model.fit(xtrain,ytrain,
               epochs=50,
               validation_split=0.2,
               verbose=1)

ypred= deep_model.predict(xtest)

test_pred = plt.scatter(ytest,ypred,color='b')
test_test= plt.scatter(ytest, ytest, color='r')
plt.legend((test_pred,test_test),('predition', 'turth'), loc='upper left', fontsize=8)
plt.show()

yt = deep_model.predict(xtrain)
ytes= deep_model.predict(xtest)
#from sklearn.metrics import accuracy_score
#ts= accuracy_score(ytrain, yt)
#tt= accuracy_score(ytest,ytes)
plt.plot(yt,label='train', color='red')
plt.plot(ytes,label='test',color='blue')
plt.show()

!pip install metrics

score =  deep_model.evaluate(xtest,ytest, verbose=0)
print('loss',score[0])
print('test accauray', score[1])

def calculate_mape(actual, predicted) -> float:
  
    # Convert actual and predicted
    # to numpy array data type if not already
    if not all([isinstance(actual, np.ndarray),
                isinstance(predicted, np.ndarray)]):
        actual, predicted = np.array(actual), np.array(predicted)
  
    # Calculate the MAPE value and return
    return round(np.mean(np.abs((
      actual - predicted) / actual)) * 100, 2)
#print(calculate_mape(ytest,ypred),"%")
pred1= deep_model.predict([[1,20,1,2,20,2,20,2,0,0,0,0,0,1,0,1,0,1,0,0,0,0,1,0,0,0,1,1,0]])
print(pred1)

import pickle
# open a file, where you ant to store the data
file = open('deep_rf.pkl', 'wb')

# dump information to that file
pickle.dump(deep_model, file)
model = open('deep_rf.pkl','rb')